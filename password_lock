module password_lock(
    input wire [3:0] input_password,
    input wire reset,
    input wire clock,
    output wire unlock,
    output wire beep
);
// 密码存储器
reg [3:0] stored_password;
// 输入错误次数计数器
reg [1:0] error_count;
// 计时器
reg [15:0] timer;
// 状态机
reg [2:0] state;

// 状态定义
parameter IDLE = 3'b000;
parameter INPUT_PASSWORD = 3'b001;
parameter UNLOCK = 3'b010;
parameter ALARM = 3'b011;

// 密码存储和复位
always@(posedge clock) begin
    if(reset) begin
        stored_password <= 4'b0000;
    end else begin
        stored_password <= 4'b1101; // 存储密码为 1101
    end
end

// 输入密码和错误计数
always@(posedge clock) begin
    if(reset) begin
        error_count <= 2'b00;
        state <= IDLE;
    end else begin
        case(state)
            IDLE: begin
                if(input_password != stored_password) begin
                    error_count <= error_count + 1;
                    state <= INPUT_PASSWORD;
                end else begin
                    error_count <= 2'b00;
                    state <= UNLOCK;
                end
            end
            INPUT_PASSWORD: begin
                if(input_password != stored_password) begin
                    error_count <= error_count + 1;
                    if(error_count == 2'b11) begin
                        state <= ALARM;
                    end else begin
                        state <= INPUT_PASSWORD;
                    end
                end else begin
                    error_count <= 2'b00;
                    state <= UNLOCK;
                end
            end
            UNLOCK: begin
                if(timer >= 16'd5000) begin
                    state <= ALARM;
                end else begin
                    state <= IDLE;
                end
            end
            ALARM: begin
                state <= ALARM;
            end
        endcase
    end
end

// 解锁和报警
always@(posedge clock) begin
    if(reset) begin
        unlock <= 1'b0;
        beep <= 1'b0;
        timer <= 16'd0;
    end else begin
        case(state)
            IDLE: begin
                unlock <= 1'b1;
                beep <= 1'b0;
                timer <= 16'd0;
            end
            INPUT_PASSWORD: begin
                unlock <= 1'b0;
                beep <= 1'b0;
                timer <= 16'd0;
            end
            UNLOCK: begin
                unlock <= 1'b1;
                beep <= 1'b0;
                timer <= timer + 1;
            end
            ALARM: begin
                unlock <= 1'b0;
                beep <= 1'b1;
                timer <= 16'd0;
            end
        endcase
    end
end

endmodule
