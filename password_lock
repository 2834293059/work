`timescale 1ns / 1ps

module password_lock(
    input clk,                       // 时钟信号
    input rst,                       // 复位信号
    input [3:0] input_password,      // 输入的密码
    output reg unlock,               // 解锁信号
    output reg beep                  // 警报信号
);

typedef enum {IDLE, INPUT_PASSWORD, UNLOCK, ALARM} state_t;   // 状态类型定义

localparam PASSWORD = 4'b1101;       // 预设密码
localparam TIMEOUT = 8;              // 计时器超时时间

reg [2:0] error_count;               // 密码错误计数器
reg [3:0] password_buffer;           // 密码输入缓存
reg [7:0] elapsed_time;              // 计时器
reg [7:0] timeout_count;             // 超时计数器
state_t state;                       // 状态变量

// SystemVerilog header file for data types
`include "systemverilog_types.sv"

always @(posedge clk or posedge rst) begin
    if (rst) begin
        error_count <= 3'b0;             // 复位所有寄存器和变量
        password_buffer <= 4'b0;
        elapsed_time <= 8'b0;
        timeout_count <= 8'b0;
        state <= IDLE;
        unlock <= 1'b0;
        beep <= 1'b0;
    end else begin
        elapsed_time <= elapsed_time + 1;    // 计时器加 1
        case (state)
            IDLE: begin                      // 空闲状态
                if (input_password != 4'b0) begin
                    state <= INPUT_PASSWORD; // 转换到输入密码状态
                    password_buffer <= input_password;
                end
            end
            INPUT_PASSWORD: begin             // 输入密码状态
                if (elapsed_time >= TIMEOUT) begin
                    state <= IDLE;           // 超时，返回空闲状态
                    password_buffer <= 4'b0; // 清空密码输入缓存
                    timeout_count <= 8'b0;   // 清空超时计数器
                end else if (input_password == PASSWORD) begin
                    state <= UNLOCK;         // 密码正确，转换到解锁状态
                    password_buffer <= 4'b0; // 清空密码输入缓存
                    timeout_count <= 8'b0;   // 清空超时计数器
                end else if (timeout_count >= 2) begin
                    state <= ALARM;          // 超时次数达到 2，转换到警报状态
                    password_buffer <= 4'b0; // 清空密码输入缓存
                    timeout_count <= 8'b0;   // 清空超时计数器
                end else if (input_password != 4'b0) begin
                    password_buffer <= input_password;  // 更新密码输入缓存
                    timeout_count <= timeout_count + 1; // 超时计数器加 1
                end
            end
            UNLOCK: begin                     // 解锁状态
                if (elapsed_time >= TIMEOUT) begin
                    state <= IDLE;           // 超时，返回空闲状态
                    password_buffer <= 4'b0; // 清空密码输入缓存
                    timeout_count <= 8'b0;   // 清空超时计数器
                    unlock <= 1'b0;          // 取消解锁信号
                end else begin
                    unlock <= 1'b1;          // 发送解锁信号
                    timeout_count <= 8'b0;   // 清空超时计数器
                end
            end
            ALARM: begin                      // 警报状态
                beep <= 1'b1;                // 发送警报信号
                if (elapsed_time >= TIMEOUT) begin
                    state <= IDLE;           // 超时，返回空闲状态
                    password_buffer <= 4'b0; // 清空密码输入缓存
                    timeout_count <= 8'b0;   // 清空超时计数器
                    beep <= 1'b0;            // 取消警报信号
                    unlock <= 1'b0;          // 取消解锁信号
                end else begin
                    timeout_count <= 8'b0; // 清空超时计数器
                end
            end
        endcase
    end
end

endmodule
